




:css
  div.ontologyFormError {
  color: red;
  padding-top: 3px;
  }

- unless @errors.nil?
  .enable-lists{:style => "color:red;"}
    %strong Errors On Form
    %ul
      - if @errors[:error].instance_of? OpenStruct
        - errors = @errors[:error].to_h
        - errors.delete :links
        - errors.delete :context
        - errors.to_h.each do |errors_field, error|
          - next if error.nil?
          <style>#ontology_#{errors_field} { border: thin solid red; }</style>
          %li
            - if error.instance_of? OpenStruct
              - error_hash = error.to_h
              - error_hash.delete :links
              - error_hash.delete :context
              - error_hash.each do |error_type, e|
                = "#{error_type} : #{e}"
            - else
              = errors_field
      - else
        -# A generic fallback
        = @errors.to_json

.upload-ontology-container
  .upload-ontology-card
    .upload-ontology-center
      .Upload-ontology-title
        %div Upload ontology
        %hr
    .upload-ontology-progress
      .details.progress-item
        .outlined-circle.outlined-active-circle
          %img{src: asset_path("white-check.svg")}
        .active 
          Details
      %hr.line
      .General-metadata.progress-item
        .outlined-circle
          %img{src: asset_path("white-check.svg")}
        %div General metadata
      %hr.line
      .Dates-and-contacts.progress-item
        .outlined-circle
          %img{src: asset_path("white-check.svg")}
        %div Dates  contacts
    
    
    
    .upload-ontology-details-step{"data-form": "1"}
      .upload-ontology-field-container
        %div Name
        %input.text-input{name: "name", type: "text"}
      .upload-ontology-field-container
        %div Acronym
        %input.text-input{name: "acronym", type: "text"}
      .upload-ontology-field-container
        %div Administrator
        = f.select(:administeredBy, @user_select_list ,{selected: @ontology.administeredBy || session[:user].id}, {multiple: true, :"data-placeholder" => "You should select one admin at least", class:"form-control"})
      .upload-ontology-field-container
        %div This ontology is a view of
        %input.text-input{name: "view_of", type: "text"}
      .upload-ontology-field-container
        %div.mb-2 Categories
        %div.upload-ontology-chips-container
          - @categories.each do |category|
            = render ChipsComponent.new(name: category[:acronym], value: category[:acronym])
      .upload-ontology-field-container
        %div.mb-2 Groups
        %div.upload-ontology-chips-container
          - @groups.each do |group|
            = render ChipsComponent.new(name: group[:acronym], value: group[:acronym])
    .upload-general_metadata-step.hide{"data-form": "2"}
      second step
    .upload-ontology-dates-and-contacts-step.hide{"data-form": "3"}
      third step




    .upload-ontology-actions
      #backBtn.upload-ontology-back-button.hide{:onclick => "navigateForm('back')"}
        %svg{:fill => "none", :height => "9", :viewbox => "0 0 6 9", :width => "6", :xmlns => "http://www.w3.org/2000/svg"}
          %path{:d => "M5.10216e-05 4.40153C5.10216e-05 4.55929 0.0602865 4.71702 0.180504 4.8373L3.9654 8.62216C4.20617 8.86293 4.59653 8.86293 4.8372 8.62216C5.07787 8.38149 5.07787 7.99121 4.8372 7.75042L1.48811 4.40153L4.83708 1.05262C5.07775 0.811852 5.07775 0.421607 4.83708 0.180958C4.59641 -0.059926 4.20605 -0.059926 3.96528 0.180958L0.180387 3.96576C0.0601501 4.08609 5.10216e-05 4.24383 5.10216e-05 4.40153Z", :fill => "#31B404"}
        %div Back
      #nextBtn.upload-ontology-next-button{:onclick => "navigateForm('next')"}
        %div Next
        %img{:alt => "", :src => asset_path("arrow-right.svg")}/
      #finishBtn.upload-ontology-finish-button.upload-ontology-next-button.hide{:onclick => "finish()"}
        %div Finish
        %img{:alt => "", :src => asset_path("white-check.svg")}/

:javascript
  const NUMBER_OF_FORMS = 3;
  const BTN_IDS = ["backBtn", "nextBtn", "finishBtn"];
  let currentForm = 1;
  
  const navigateForm = (direction) => {
      if (currentForm && currentForm >= 1 && currentForm <= 3) {
          if (direction === "next") {
              currentForm += 1;
          }  
          
          if (direction === "back") {
              currentForm -= 1;
          }

          showForm(currentForm);
      }
  };

  const showForm = (targetForm) => {
          
      for (let index = 1; index <= NUMBER_OF_FORMS; index++) {
          
          const targetFormDOM = document.querySelector(`[data-form="${index}"]`);
          
          const isCurrentForm = targetForm === index;

          targetFormDOM.classList.toggle("hide", !isCurrentForm);

          if (isCurrentForm) {
              updateProgressBar(targetForm);
              updateButtons(targetForm);
          }
          
      }

  }

  const updateButtons = (targetForm) => {
      switch (targetForm) {
          case 1: 
              showBtn([BTN_IDS[1]]);
              break;

          case NUMBER_OF_FORMS:
              showBtn([BTN_IDS[0], BTN_IDS[2]]);
              break;

          default: 
              showBtn([BTN_IDS[0], BTN_IDS[1]]);
              break;
      }

  }

  const showBtn = (btnIds = []) => {
      
      BTN_IDS.forEach((btn) => {
          
          const targetBtnDOM = document.querySelector("#" + btn);
          
          const shouldShowBtn = btnIds.includes(btn);
          targetBtnDOM.classList.toggle("hide", !shouldShowBtn);

      });
  }

  const updateProgressBar = (targetForm) => {
      const progressItemsDOM = document.querySelectorAll(".progress-item");
      const line = document.querySelectorAll(".line");

      progressItemsDOM.forEach((item, index) => {
          const isPassedSection = index + 1 < targetForm;
          const isCurrentSection = index + 1 === targetForm;

          item.children[0].classList.toggle("outlined-checked-circle", isPassedSection);
          item.children[0].classList.toggle("outlined-active-circle", isCurrentSection);
          
          
          item.children[1].classList.toggle("active", isCurrentSection || isPassedSection);
          
          
          line[index]?.classList.toggle("active", isPassedSection);
      });
  };


