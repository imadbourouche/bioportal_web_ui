.recommender-page-container{'data-controller': 'recommender'}
  .recommender-page-subcontainer
    .recommender-page-title
      .text
        Recommender
      .line
    .recommender-page-decription
      Get recommendations for the most relevant ontologies from an excerpt of text or a list of keywords

    = form_tag('/recommender', method: :get, 'data-turbo': true) do
      .recommender-page-inputs{'data-controller': 'reveal-component'}
        .inputs 
          %div
            - is_input = @results.nil? || @results.empty?
            .recommender-page-text-area{class: is_input ?  "" : "d-none", 'data-recommender-target': 'input'}
              %textarea#recommender-text-area{rows: "4" , placeholder: 'Enter or past a text to be annotated ...', name: "input", oninput: 'handleInput(event)'}
                = params[:input]
              .insert-sample-text-button
                .button
                  .text
                    Insert sample text
                  = inline_svg_tag 'icons/arrow-curved-up.svg'

            #recommender-page-result-area.recommender-page-text-area-results{class: is_input ? "d-none" : "", 'data-recommender-target': 'result'}
              .text
                = params[:input]
          .recommender-page-options
            .section-text
              Options
            .input
              .title
                input
              .radios
                .text-choice
                  = render Input::RadioChipComponent.new(label: 'Text', name: 'input_type', value: '1', checked: true)
                .keywords-choice
                  = render Input::RadioChipComponent.new(label: 'Keywords', name: 'input_type', value: '2')
            .output
              .title
                output
              .radios
                .ontologies-choice
                  = render Input::RadioChipComponent.new(label: 'Ontologies', name: 'output_type', value: '1', checked: true)
                .ontology-sets-choice
                  = render Input::RadioChipComponent.new(label: 'Ontology sets', name: 'output_type', value: '2')
            .advanced-options-button{'data-action': 'click->reveal-component#show', 'data-reveal-component-target': 'showButton'}
              = inline_svg_tag "icons/settings.svg"
              .text 
                Show advanced options
            .advanced-options-button.d-none{'data-action': 'click->reveal-component#hide', 'data-reveal-component-target': 'hideButton'}
              = inline_svg_tag 'icons/hide.svg'
              .text 
                Hide advanced options
              
        .recommender-advanced-options.d-none{'data-reveal-component-target': 'item'}
          .weights-configuration
            .title 
              Weights configuration
            .inputs-container
              .input
                = render Input::NumberComponent.new(label: "Converage", name: "wc", value: 0.55)
              .input
                = render Input::NumberComponent.new(label: "Acceptance", name: "wa", value: 0.15)
              .input
                = render Input::NumberComponent.new(label: "Knowledge detail", name: "wd", value: 0.15)
              .input
                = render Input::NumberComponent.new(label: "Specialization", name: "ws", value: 0.15)
          .ontologies-configuration
            .title 
              Ontologies configuration
            .inputs-container
              .input
                = render Input::NumberComponent.new(label: "Maximum number of ontologies per set", name: "max_elements_set", value: 3)
              .input
                - get_ontologies_data
                = render Input::SelectComponent.new(label: "Select ontologies", id: 'ontologies', name: 'ontologies', value: @onts_for_select, multiple: "multiple")
          

        .recommender-page-button#get_recommendations_button{class: is_input ?  "" : "d-none", 'data-recommender-target': 'button'}
          = render Buttons::RegularButtonComponent.new(id:'recommender', value: "Get recommendations", variant: "primary", type: 'submit')

        .recommender-page-button{class: is_input ? "d-none" : "", 'data-action': 'click->recommender#edit'}
          = render Buttons::RegularButtonComponent.new(id:'edit-recommender', value: "Edit", variant: "primary") do |btn|
            - btn.icon_left do
              = inline_svg_tag "edit.svg"
      
    - unless @results.nil? || @results.empty?
      .recommender-page-results 
        .title
          Recommended ontologies
        .recommender-table-container
          = render TableComponent.new(id: 'recommender-table', borderless: true, layout_fixed: true, small_text: true, outline: true, sort: true, default_sort_column: '1') do |t|
            - t.header do |h|
              - @results_table_header.each do |header|
                - h.th do
                  = header
            - @results.each do |result|
              - t.row do |r|
                - r.td do
                  %a.recommender-result-ontology{href: result[:ontologies][0][:link]}
                    = result[:ontologies][0][:acronym]
                - r.td do
                  = render Display::ProgressBarComponent.new(progress: result[:final_score])
                - r.td do
                  = render Display::ProgressBarComponent.new(progress: result[:coverage_score])
                - r.td do
                  = render Display::ProgressBarComponent.new(progress: result[:acceptance_score])
                - r.td do
                  = render Display::ProgressBarComponent.new(progress: result[:details_score])
                - r.td do
                  = render Display::ProgressBarComponent.new(progress: result[:specialization_score])
                - r.td do
                  .recommender-result-highlighted
                    = render Input::RadioChipComponent.new(label: result[:annotations].length.to_s+" annotations", name: 'highlighted_recommendation', value: result[:annotations], checked: result[:highlighted], onchange: 'handleHighlightedChange()')

      

:javascript
  function handleInput(event) {
    var selectedInputChoice = document.querySelector('input[name="input_type"]:checked').value;
    if (selectedInputChoice === "2"){
      const textarea = document.getElementById('recommender-text-area');
      const value = textarea.value;
      const lastCharIsSpace = event.data === ' ';
      const formattedValue = lastCharIsSpace ? value.trim() + ', ' : value;
      textarea.value = formattedValue;
    }
  }

  handleHighlightedChange()
  // here starts the logic of displaying annotations
  function handleHighlightedChange(){
    let recommandations_area = document.getElementById('recommender-page-result-area')
    let jsonString = document.querySelector('input[name="highlighted_recommendation"]:checked').value;
    let jsonStringModified = jsonString.replace(/:text/g, '"text"').replace(/:link/g, '"link"').replace(/=>/g, ':');
    let jsonArray = JSON.parse(jsonStringModified);
    var words = recommandations_area.textContent.split(/\s+/);
    for (var i = 0; i < words.length; i++) {
        var word = words[i].replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '').toLowerCase(); // Remove punctuation and convert to lowercase
        var foundItem = jsonArray.find(item => item.text.toLowerCase() === word);

        if (foundItem) {
          // Replace the word with <a> tag
          words[i] = '<a href="' + foundItem.link + '">' + words[i] + '</a>';
        }
      }
    recommandations_area.innerHTML = words.join(' ');
  }

  
