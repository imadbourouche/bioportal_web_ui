- @title = t('.title')

:css
  .greyed{
    color:#CFCFCF;
  }
- unless $FRONT_NOTICE.nil? || $FRONT_NOTICE.empty? || cookies[:front_page_notice_closed].eql?("true")
  :javascript
    function close_message(){
      var exdate = new Date();
      exdate.setDate(exdate.getDate() + 7);
      document.cookie="front_page_notice_closed=true; expires="+exdate.toGMTString();
      jQuery("#notice_message").hide();
    }
    %p#notice_message{:style => "padding: 10px; margin: 10px; border:1px solid #EFEFEF; background-color: #F9F9F9;"}
    = $FRONT_NOTICE
    \&nbsp;&nbsp;
    %a{:href => "#", :onclick => "close_message(); return false;", :style => "font-size: small; color: darkGray;"} [close]

%div{class: "container", style: "padding-top: 15px; padding-bottom: 25px"}

  %div{class: "row"}
    %div{class: "col-md-12"}
      %div{class: "eco-page-header text-center"}
        %h1{class:"eco-blue-font bold"}
          = t(".welcome").html_safe
          %small{class:"eco-gray-font"}
            = t(".tagline").html_safe

  %div.search{class: "row"}
    -# Search for a class across ontologies
    %div{class: "col-md-6"}
      %div{class: "panel panel-default", style: "min-height:134px;"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} Search for a class
        %div{class: "panel-body"}
          = form_tag("/search", method: "get") do
            %div{class: "input-group"}
              = text_field_tag("query", nil, class: "form-control", placeholder: t(".query_placeholder"))
              %span{class: "input-group-btn"}
                = button_tag(type: "submit", class: "btn btn-primary", aria: {label: "Search for a class"}) do
                  %i{class: "fa fa-search fa-lg", aria: {hidden: "true"}}
            %div{style: "padding-top: 9px;"}
              %a{:href => "/search?opt=advanced"} Advanced Search

    -# Search for an ontology
    %div{class: "col-md-6"}
      %div{class: "panel panel-default", style: "min-height:134px;"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} Find a semantic resource (ontology, thesaurus, etc.)
        %div{class: "panel-body"}
          %input#find_ontology_id{:type => "hidden"}
          %div{class: "input-group"}
            = text_field_tag("ontology", nil, id: "find_ontology", class: "form-control", placeholder: t(".find_ontology_placeholder"))
            %span{class: "input-group-btn"}
              = button_tag(class: "btn btn-primary", onclick: "jumpToValueOntology()", aria: {label: "Find an ontology"}) do
                %i{class: "fa fa-search fa-lg", aria: {hidden: "true"}}
          %div{style: "padding-top: 9px"}
            %ul.sf-menu.sf-vertical
              %li
                = link_to("Browse Ontologies", "#", style: "white-space: nowrap; padding: 0px; background: #fff; border: 1px solid #fff;")
                %ul
                  %li
                    = link_to("All", ontologies_path())
                  - @groups.to_a.each do |group|
                    %li
                      = link_to(group[:name], ontologies_path(filter: "#{CGI.escape(group[:acronym])}"))

  %div.statistics{class: "row"}
    -# Ontology visits
    %div{class: "col-md-6"}
      %div{class: "panel panel-default", style: "min-height:350px;"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} Ontology Visits #{"in full #{$SITE} " if at_slice?} (#{@analytics.date.strftime("%B %Y")})
        %div{class: "panel-body"}
          %canvas#myChart
          = link_to("More", visits_path())

    -# Ontology statistics
    %div{class: "col-md-6"}
      %div{class: "panel panel-default", style: "min-height:350px;"}
        %div{class: "panel-heading"}
          %h3{class: "panel-title"} #{$SITE} Statistics #{"in full #{$SITE}" if at_slice?}
        %div{class: "panel-body"}
          %table.minimal.align-right{width: "100%", style: "margin-bottom: 25px;"}
            %tbody
              %tr
                %td Ontologies
                %td= @ont_count
              %tr
                %td Classes
                %td= number_with_delimiter(@cls_count, :delimiter => ",")
              -unless Rails.env.appliance?
                %tr
                  %td Resources Indexed
                  %td= number_with_delimiter(@ri_resources, :delimiter => ",")
                %tr
                  %td Indexed Records
                  %td= number_with_delimiter(@ri_record_count, :delimiter => ",")
                %tr
                  %td Direct Annotations
                  %td= number_with_delimiter(@direct_annotations, :delimiter => ",")
                %tr
                  %td Direct Plus Expanded Annotations
                  %td= number_with_delimiter(@direct_expanded_annotations, :delimiter => ",")

- ont_names = @ontologies.map{|ont| "[\"#{ont.name} (#{ont.acronym})\",\"#{ont.acronym}\"]"}
- anal_ont_names = {}
- anal_ont_numbers = []
- @analytics.onts[0..4].each do |visits|
  - ont = @ontologies_hash[visits[:ont].to_s]
  - anal_ont_names[ont.acronym] = ont.name
  - anal_ont_numbers << visits[:views]

:javascript
  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }

  function jumpToValueOntology() {
    var ontology = jQuery("#find_ontology")[0].value;
    var ontology_id = jQuery("#find_ontology_id").val();

    if (ontology_id == null || ontology_id == "") {
      // didnt pick an ont
      alert("The ontology does not exist. You must pick an ontology from the list.")

      return false;
    }

    if (!!ontology_id) {
      var sValue = jQuery("#find_ontology_id").val();
      if (sValue == null || sValue == "") {
        sValue = data;
      }
      document.location="/ontologies/"+sValue;
      jQuery.blockUI({ message: '<h1>#{image_tag("jquery.simple.tree/spinner.gif")} Loading Ontology...</h1>' });
      return;
    }
  }

  function formatResultOntologySearch(value, data) {
    jQuery("#find_ontology_id").val("");
    var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"); // .*+?|()[]{}\
    var keywords = jQuery("#find_ontology").val().replace(specials, "\\$&").split(' ').join('|');
    var regex = new RegExp( '(' + keywords + ')', 'gi' );
    return value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>");
  }

  function jumpToValueResource(){
    var cls = jQuery("#find_resource")[0].value;
    var data = jQuery('body').data("resource_results");

    if (data == null) {
      // Im doing a search

      var search = confirm("Press OK to Search for resources using the concept, or Cancel to select a concept")
      if (search) {
        query = jQuery("#find_resource").val();
        document.location="/resource_index";
        return;
      }
    }

    if (!!data) {
      var concept_id = data[0];
      var ontology_version_id = data[2];
      var ontology_id = data[7];
      var full_ontology_id = jQuery(document).data().bp.config.rest_url + "/ontologies/" + ontology_id;
      window.location = "/resource_index/resources?classes[" + encodeURIComponent(full_ontology_id) + "]=" + encodeURIComponent(concept_id);
      return;
    }
  }

  function formatItemResource(value, data) {
    jQuery('body').data("resource_results", null);
    var specials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"); // .*+?|()[]{}\
    var keywords = jQuery("#find_resource").val().replace(specials, "\\$&").split(' ').join('|');
    var regex = new RegExp( '(' + keywords + ')', 'gi' );

    // data[7] is the ontology_id, only included when searching multiple ontologies
    if (data[6] == undefined) {
      var result = value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>") + " <span style='font-size:9px;color:blue;'>(" + data[1] + ")</span>";
    } else {
      var result = value.replace(regex, "<b><span style='color:#006600;'>$1</span></b>") + " <span style='font-size:9px;color:blue;'>(" + data[1] + ")</span>" + "<span style='color:grey;font-size:7pt;'> from: " + data[6] + "</span>";
    }

    return result;
  }

  // We use this in conjunction with autocomplete because autocomplete
  // fails when there are multiple results with the same class name
  function selectResource(value, data) {
    jQuery('body').data("resource_results", value.data);
    jumpToValueResource();
  }

  // Sets a hidden form value that records the virtual id when a concept is chosen in the jump to
  // This is a workaround because the default autocomplete search method cannot distinguish between two
  // ontologies that have the same preferred name but different ids.
  function selectFindOntology(value, data){
    jQuery("#find_ontology_id").val(value.data[0]);
    jQuery("#find_ontology").focus();
    jumpToValueOntology();
  }

  var ontologies_array=[#{ont_names.join(",")}];

  jQuery(document).ready(function() {
    jQuery("#find_ontology").autocomplete({
      selectFirst: true,
      data: ontologies_array,
      minChars: 1,
      matchSubset: 1,
      maxItemsToShow: 20,
      delay: 1,
      showResult: formatResultOntologySearch,
      onItemSelect: selectFindOntology
    });

    jQuery("#find_resource").autocomplete({
      selectFirst: true,
      url: "/search/json_search/",
      extraParams: { separator: "\n" },
      cacheLength: 1,
      maxCacheLength: 1,
      matchSubset: 0,
      minChars: 3,
      maxItemsToShow: 20,
      showResult: formatItemResource,
      onItemSelect: selectResource
    });

    jQuery('ul.sf-menu').superfish({
      animation: {height:'show'},   // slide-down effect without fade-in
      delay:     1200               // 1.2 second delay on mouseout);
    });

    var ontNames = #{anal_ont_names.keys.to_json.html_safe};
    var ontNumbers = #{anal_ont_numbers.to_json.html_safe};
    var onts = #{anal_ont_names.to_json.html_safe};
    var ctx = document.getElementById("myChart");

    var myChart = new Chart(ctx, {
      type: 'horizontalBar',
      data: {
        labels: ontNames,
        datasets: [{
          label: "Ontology Visits",
          data: ontNumbers,
          backgroundColor: "rgba(151,187,205,0.2)",
          borderColor: "rgba(151,187,205,1)",
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        legend: {
          display: false
        },
        scales: {
          xAxes: [{
            ticks: {
              beginAtZero: true,
              stepSize: 5000,
              // Return an empty string to draw the tick line but hide the tick label
              // Return `null` or `undefined` to hide the tick line entirely
              userCallback: function(value, index, values) {
                return numberWithCommas(value);
              }
            }
          }],
          yAxes: [{
            ticks: {}
          }]
        },
        tooltips: {
          enabled: true,
          callbacks: {
            title: function(tooltipItems, data) {
              lbl = onts[tooltipItems[0].yLabel];

              if (lbl.length > 45) {
                lbl = lbl.substring(0, 37) + "...";
              }
              return lbl + " (" + tooltipItems[0].yLabel + ")";
            },
            label: function(tooltipItem, data) {
              return data.datasets[0].label + ": " + numberWithCommas(tooltipItem.xLabel);
            }
          }
        },
        hover: {
          onHover: function(e) {
            jQuery("#myChart").css("cursor", e[0] ? "pointer" : "default");
          }
        }
      }
    });

    ctx.onclick = function(evt) {
      var activePoints = myChart.getElementsAtEvent(evt);

      if (activePoints.length > 0) {
        //get the internal index of slice in pie chart
        var clickedElementIndex = activePoints[0]["_index"];
        //get specific label by index
        var label = myChart.data.labels[clickedElementIndex];
        //get value by index
        // var value = myChart.data.datasets[0].data[clickedElementIndex];
        window.location.href = "#{ontologies_path()}/" + label;
      }
    }
  });
