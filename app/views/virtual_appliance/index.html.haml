-@title = "NCBO Virtual Appliance Download"

%div{:style => "padding: 13px; max-width: 800px;", :class => "enable-lists"}
  %h1 NCBO Virtual Appliance Download
  -if @virtual_appliance_access == false
    %p Please contact support@bioontology.org for access to the NCBO Virtual Appliance
  -else
    %p The NCBO Virtual Appliance image contains a pre-installed, pre-configured version of commonly-used open source NCBO software running on a Linux operating system. The image was created using VMWare and is available for download at the links below.
    %p The following software is included on the image:
    %ul
      %li Ontologies API (REST service)
      %li Annotator
      %li Recommender
      %li BioPortal Web User Interface (including ontology visualization, widgets, and Annotator UI)
    %p Please see our <a href="http://www.bioontology.org/wiki/index.php/Category:NCBO_Virtual_Appliance"> documentation</a> for more information on working with the Appliance.
    %h2 Download
    %ul
      %li Version 2.5 Release Candidate 3 <a href="http://www.bioontology.org/ncbo-appliance/OntoPortal-2.5-RC3.zip"> OVF</a> | <a target="_blank" href="http://www.bioontology.org/wiki/index.php/Virtual_Appliance_FAQ#How_can_I_use_the_Appliance_on_Amazon_EC2.3F">Amazon EC2</a>
      %li Version 2.4 <a href="http://www.bioontology.org/ncbo-appliance/ncbo-appliance-2.4.zip"> OVF</a> | <a target="_blank" href="http://www.bioontology.org/wiki/index.php/Virtual_Appliance_FAQ#How_can_I_use_the_Appliance_on_Amazon_EC2.3F">Amazon EC2</a>
      %li Version 2.2 <a href="http://bioontology.org/ncbo-appliance/ncbo-appliance-2.2.zip"> OVF</a> | <a target="_blank" href="http://www.bioontology.org/wiki/index.php/Virtual_Appliance_FAQ#How_can_I_use_the_Appliance_on_Amazon_EC2.3F">Amazon EC2</a>

  -if @user.admin?
    %div{:style => "margin: 2em 0 0; padding: 1em 1em; border: solid thin gray; background-color: lightGray;"}
      %h1{:style => "margin-bottom: 15px;"} Admin: Add Users
      -unless flash[:admin_error].nil? || flash[:admin_error].empty?
        %div{:style => 'color: red; padding: 4px; margin: 0 0 1em; background: white; border: thin solid darkGray;'}
          = flash[:admin_error]
      =form_for :appliance_user do |f|
        = f.label :user_id, "Account Name: "
        = f.text_field :user_id
        &nbsp;&nbsp;
        = f.submit "Add User"

      %h2{:style => "margin-top: 1em;"}
        Accounts with access
        %a#export{href: "#", style: "margin-left: 2em; margin-top: -1em; font-size: 11px;"}
          Export Appliance Users As CSV
      %table#user_table.zebra{style: "border: thin lightGray solid; background-color: white;"}
        %thead
          %tr
            %th Username
            %th Name
            %th Email
        %tbody
        -@users_with_access.compact.each do |user|
          %tr
            %td= user.username
            %td= (user.firstName.to_s + " " + user.lastName.to_s).strip
            %td= user.email

:javascript

  $(document).ready(function() {
    function exportTableToCSV($table, filename) {
      var $headers = $table.find('tr:has(th)'),
          $rows = $table.find('tr:has(td)'),
          // Temporary delimiter characters unlikely to be typed by keyboard
          // This is to avoid accidentally splitting the actual contents
          tmpColDelim = String.fromCharCode(11), // vertical tab character
          tmpRowDelim = String.fromCharCode(0), // null character
          // actual delimiter characters for CSV format
          colDelim = '","',
          rowDelim = '"\r\n"',
          // Grab text from table into CSV formatted string
          csv = '"',
          csvData;
      csv += formatRows($headers.map(grabRow));
      csv += rowDelim;
      csv += formatRows($rows.map(grabRow)) + '"';

      // Data URI
      csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csv);
      $(this).attr({
        'download': filename,
        'href': csvData
      });

      //------------------------------------------------------------
      // Helper Functions
      //------------------------------------------------------------

      // Format the output so it has the appropriate delimiters
      function formatRows(rows) {
          return rows.get().join(tmpRowDelim).split(tmpRowDelim).join(rowDelim).split(tmpColDelim).join(colDelim);
      }

      // Grab and format a row from the table
      function grabRow(i, row) {
        var $row = $(row);
        //for some reason $cols = $row.find('td') || $row.find('th') won't work...
        var $cols = $row.find('td');
        if (!$cols.length) $cols = $row.find('th');
        return $cols.map(grabCol).get().join(tmpColDelim);
      }

      // Grab and format a column from the table
      function grabCol(j, col) {
        var $col = $(col),
            $text = $col.text();
        return $text.replace('"', '""'); // escape double quotes
      }
    }

    // This must be a hyperlink
    $("#export").click(function(event) {
      var outputFile = 'appliance_users.csv'
      exportTableToCSV.apply(this, [$('#user_table'), outputFile]);
    });
  });
